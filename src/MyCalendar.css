@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700);
@import url(https://fonts.googleapis.com/icon?family=Material+Icons);

/* This uses the original green color from the hooks version of the tutorial, but modified it to use CSS variables like the orignal blue one does */
.icon {
  font-family: "Material Icons", serif;
  font-style: normal;
  font-size: 2rem;
  font-weight: 700;
  color: #000;
  /* display: inline-block;
  vertical-align: middle;
  line-height: 1;
  text-transform: none;
  letter-spacing: normal;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  font-feature-settings: "liga"; */
}

/* VARIABLES */
:root {
  --main-color: #1affa0;
  --upper-gradient-color: #cff153;
  --text-color: #777;
  --text-color-light: #ccc;
  --border-color: #eee;
  --bg-color: #f9f9f9;
  --neutral-color: #fff;
  --cell-color: #fff;
  --toggled-color: #f8f8f8;
  --firebase-auth-darktheme-color: 'transparent';
}

/* GENERAL */
* {
  box-sizing: border-box;
}

body {
  font-family: "Open Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 1em;
  font-weight: 300;
  line-height: 1.5;
  position: relative;
  color: var(--text-color);
  background: var(--bg-color);
}

/* not used anymore */
/* header {
  display: block;
  width: 100%;
  padding: 1.75em 0;
  border-bottom: 1px solid var(--border-color);
  background: var(--neutral-color);
} */

.toggleButtonClass {
  -webkit-transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  transition-property: background-color, box-shadow, border-color, color;
  transition-duration: 250ms, 250ms, 250ms, 250ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1),
    cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1),
    cubic-bezier(0.4, 0, 0.2, 1);
  transition-delay: 0ms, 0ms, 0ms, 0ms;

  border-radius: 0px;
  /* original MUI box shadow */
  /* box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%); */

  /* My custom shadow, I just changed spread to -20px and that seemed to make it look reasonable */
  box-shadow: 0px 3px 1px -20px rgb(0 0 0 / 20%),
    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);
}

/* This is the attractive gradient effect for todays date that was originally in the tutorial. Might keep this class as it may be useful in the future*/

/* .toggleButtonClass.today {
  border-left: 10px solid transparent;
  border-image: linear-gradient(
    45deg,
    var(--main-color) 0%,
    var(--upper-gradient-color) 40%
  );
  border-image-slice: 1;
  transition: 0.5s ease-in;
} */

.toggleButtonClass.disabled {
  opacity: 0.5;
  color: var(--text-color-light);
  pointer-events: none;
}

/* This was the red border around the selected date (or the last clicked on date). Could also maybe use this class in the future, especially if we work out how to do an elevated effect for todays date */
/* .toggleButtonClass.selected {
  border: 3px solid red;
  font-size: 100;
  transition: 0.5s ease-in;
} */

/* testing button by copying and pasting css from muibuttonbase */
/* 
.testingButton {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  box-sizing: border-box;
 
  color: inherit;
  border-radius: 4px;
  -webkit-transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  transition-property: background-color, box-shadow, border-color, color;
  transition-duration: 250ms, 250ms, 250ms, 250ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1);
  transition-delay: 0ms, 0ms, 0ms, 0ms;
  color: rgba(0, 0, 0, 0.87);
  background-color: #90caf9;
  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);
  width: 100%;
} */

/* CSS Grid container styles */

.container {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 1em;
}

.container div {
  aspect-ratio: 1;
}

.container div .numberWithCircle {
  position: absolute;
  /* font size is now set in the styleoverrides in App.js darktheme */
  /* font-size: 1rem; */
  line-height: 1;
  top: 0.25em;
  right: 0.25em;
  font-weight: 700;

  background: #1A73E8;
  border-radius: 1em;
  -moz-border-radius: 1em;
  -webkit-border-radius: 1em;
  color: #ffffff;
  line-height: 2em;
  text-align: center;
  width: 2em; 

}

.container div .number {
  position: absolute;
  /* font size is now set in the styleoverrides in App.js darktheme */
  /* font-size: 1rem; */
  line-height: 1;
  top: 0.25em;
  right: 0.25em;
  font-weight: 700;

}

.container div:hover .number,
.container div .selected .number {
  visibility: hidden;
}

.container div .bg {
  font-weight: 700;
  line-height: 1;
  /* the old color for the hover number */
  /* color: var(--main-color); */
  color: black;
  opacity: 0;
  font-size: 5em;
  position: absolute;
  /* the old offsets for the hover number */
  /* top: -0.2em;
  right: -0.05em; */
  top: 0.0em;
  right: 0.05em;
  transition: 0.25s ease-out;
  letter-spacing: -0.07em;
}

.container div :hover .bg,
.container div .selected .bg {
  opacity: 0.2;
  transition: 0.5s ease-in;
}

/* #disabledID {
  color: var(--text-color-light);
  pointer-events: none;
} */

/* centering for the days of the week headings */
.days-headings {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2rem;
  font-weight: 700;
  color: black;
}

/* specifing an id selector to override borders in MUIButtonbase as they were taking over .selected classname */
/* #selectedID {
  border-left: 10px solid transparent;
  border-image: linear-gradient(45deg, var(--main-color) 0%, var(--upper-gradient-color) 40%);
  border-image-slice: 1;
  opacity: 0.2;
  transition: 0.5s ease-in;
} */

/* GRID */
.row {
  margin: 0;
  padding: 10px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%;
}

.row-middle {
  align-items: center;
}

.column {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

.container.col-start {
  display: flex;
  justify-content: center;
  align-items: center;
}

.container.col-center {
  aspect-ratio: auto;
  display: flex;
  justify-content: center;
  align-content: center;
  align-items: center;
  flex-direction: column;
  grid-column-start: 2;
  grid-column-end: 7;
  font-size: 2rem;
  font-weight: 700;
  color: black;
}

.col-end {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Calendar */
.calendar {
  display: block;
  position: relative;
  width: 80%;
  background: var(--firebase-auth-darktheme-color);
  height: auto;
  margin: 0 auto;
}

/* not used anymore */
/* .calendar .header {
  text-transform: uppercase;
  font-weight: 700;
  font-size: 115%;
  padding: 1.5em 0;
  border-bottom: 1px solid var(--border-color);
  font-size: 2rem;
  font-weight: 700;
  color: black;
} */

.calendar .container .icon {
  cursor: pointer;
  transition: 0.15s ease-out;
}

.calendar .container .icon:hover {
  transform: scale(1.75);
  transition: 0.25s ease-out;
  color: var(--main-color);
}

.calendar .container .icon:first-of-type {
  margin-left: 1em;
}

.calendar .container .icon:last-of-type {
  margin-right: 1em;
}

.calendar .days {
  text-transform: uppercase;
  font-weight: 400;
  color: var(--text-color-light);
  font-size: 70%;
  padding: 0.75em 0;
  border-bottom: 1px solid var(--border-color);
}

/* Setting margins here affect the margins between grid cells */
.calendar .body .cell {
  position: relative;
  height: 7em;
  border: 1px solid var(--border-color);
  margin: 0.2em;
  overflow: hidden;
  cursor: pointer;
  background: var(--cell-color);
  transition: 0.25s ease-out;
}

.calendar .body .cell:hover {
  background: var(--bg-color);
  transition: 0.5s ease-out;
}

/* A hardcoded gradient is in here. I've left the original green from the hooks version of the tutorial */
.calendar .body .selected {
  border-left: 10px solid transparent;
  border-image: linear-gradient(
    45deg,
    var(--main-color) 0%,
    var(--upper-gradient-color) 40%
  );
  border-image-slice: 1;
}

.calendar .body .row {
  border-bottom: 1px solid var(--border-color);
}

.calendar .body .row:last-child {
  border-bottom: none;
}

.calendar .body .cell:last-child {
  border-right: none;
}

.calendar .body .cell .number {
  position: absolute;
  /* font size is now set in the styleoverrides in App.js darktheme */
  /* font-size: 1rem; */
  line-height: 1;
  top: 0.25em;
  right: 0.25em;
  font-weight: 700;
}

.calendar .body .cell:hover .number,
.calendar .body .selected .number {
  visibility: hidden;
}

/* An old style for disabled Cells. Could be deleted in the future */
/* .calendar .body .disabled {
  color: var(--text-color-light);
  pointer-events: none;
} */

.calendar .body .cell .bg {
  font-weight: 700;
  line-height: 1;
  color: var(--main-color);
  opacity: 0;
  font-size: 5em;
  position: absolute;
  top: -0.2em;
  right: -0.05em;
  transition: 0.25s ease-out;
  letter-spacing: -0.07em;
}

.calendar .body .cell:hover .bg,
.calendar .body .selected .bg {
  opacity: 0.2;
  transition: 0.5s ease-in;
}

.calendar .body .column {
  flex-grow: 0;
  /* flex-basis: calc(100% / 7);*/
  flex-basis: 12%;
  width: calc(100% / 5);
}
